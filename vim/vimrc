"setup vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle "gmarik/vundle"

"defaults
Bundle 'tpope/vim-sensible'

"go
Bundle 'Blackrush/vim-gocode'

"general
Bundle 'ervandew/supertab'
Bundle 'rking/ag.vim'
Bundle 'vim-scripts/Align'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'tpope/vim-surround'
Bundle 'airblade/vim-gitgutter'
Bundle 'godlygeek/tabular'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
Bundle 'spolu/dwm.vim'
Bundle 'mattn/gist-vim'
Bundle 'itchyny/lightline.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'tomtom/tcomment_vim'
Bundle 'closetag.vim'
Bundle 'majutsushi/tagbar'
Bundle 'scrooloose/syntastic'

"markdown
Bundle 'tpope/vim-markdown'

"ruby/rails
Bundle 'tpope/vim-rails'


"node/js
Bundle 'pangloss/vim-javascript'

"colors
Bundle 'tomasr/molokai'
Bundle 'noahfrederick/vim-hemisu'
Bundle 'sjl/badwolf'
Bundle 'junegunn/seoul256.vim'






let mapleader = ","
let g:mapleader = ","

"enable 256 colors
set t_Co=256
colorscheme hemisu
set bg=dark

"the most controversial settings ever
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab


set directory-=. " don't store swapfiles in the current directory
set encoding=utf-8

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

command MkGuard         call MakeIncGuard()
function MakeIncGuard()
	let basename = substitute(bufname(""), '.*/', '', '')
	let guard = '__' . substitute(toupper(basename), '\.', '_', "g") . '__'
	call append(0, "#ifndef " . guard)
	call append(1, "#define " . guard)
	call append(line("$"), "#endif")
endfunction


command MkScriptAuthor        call MakeScriptAuthor()
function MakeScriptAuthor()
	call append(1, "#coding: utf-8")
	call append(2, "#author: lxfontes")
endfunction

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"stop being annoying
set visualbell

set ignorecase "Ignore case when searching
set smartcase

set hlsearch "Highlight search things

" ruby mappings
au BufRead,BufNewFile *.pill set ft=ruby
au BufRead,BufNewFile Gemfile set ft=ruby

" .h files
:autocmd BufNewFile *.h MkGuard

" JSON
au! BufRead,BufNewFile *.json setfiletype javascript

" html
au! BufRead,BufNewFile *.ejs setfiletype html

"waf scripts
autocmd BufNewFile,BufRead wscript set filetype=python

" autoformat go
au FileType go au BufWritePre <buffer> Fmt

" Highlight end of line whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Highlight tabs
syntax match Tab /\t/
hi Tab gui=underline guifg=blue ctermbg=blue

" bindings
map <leader>l :Align
nmap <leader>a :Ag<space>
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>] :TagbarToggle<CR>
nmap <leader>g :GitGutterToggle<CR>

map <F5> :make<CR>:copen<CR>

"remove extra white space from line end
noremap <leader>s :%s/\s\+$//g<CR>

nnoremap // :TComment<CR>
vnoremap // :TComment<CR>







set title
"do not 'mask' long lines
set nowrap


"try to keep code within 80 columns
if exists("+colorcolumn")
  set colorcolumn=81
endif

"make searches show on middle of screen
set scrolloff=3
set scrolljump=5



" Highlight current line
set cursorline                " highlight current line
"hi cursorline guibg=#333333   " highlight bg color of current line
"hi CursorColumn guibg=#333333 " highlight cursor

set showmatch

"command completion
set wildmenu
set wildmode=longest:full,full

"nice popup for completion
set completeopt=menuone


"go tag

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }


let g:ctrlp_match_window = 'order:ttb,max:20'
let g:gitgutter_enabled = 0

let g:tagbar_autofocus = 1

"nerdtree settings
let g:NERDSpaceDelims=1
" Auto open nerd tree on startup
let g:nerdtree_tabs_open_on_gui_startup = 0
" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1
let NERDTreeIgnore = ['\.pyc$','\~$','\.rbc$']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

"lightline settings
let g:lightline = { 'colorscheme': 'solarized' }
"syntastic
"mark syntax errors with :signs
let g:syntastic_enable_signs=1
"automatically jump to the error when saving the file
let g:syntastic_auto_jump=0
"do not show the error list automatically
let g:syntastic_auto_loc_list=0
"don't care about warnings
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" guidelines
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" clipboard integration
set clipboard=unnamed
