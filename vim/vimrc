set nocompatible
filetype off

"setup vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle "gmarik/vundle"

"general
Bundle 'kien/tabman.vim'
Bundle 'tsaleh/vim-matchit'
Bundle 'ervandew/supertab'
Bundle 'tpope/vim-surround'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-fugitive'
Bundle 'spolu/dwm.vim'
Bundle 'vim-scripts/Gist.vim'
Bundle 'itchyny/lightline.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'tomtom/tcomment_vim'
Bundle 'closetag.vim'


"markdown
Bundle 'tpope/vim-markdown'

"ruby/rails
Bundle 'tpope/vim-rails'

"c/c++
Bundle 'Rip-Rip/clang_complete'
Bundle 'majutsushi/tagbar'

"node/js
Bundle 'pangloss/vim-javascript'

"colors
Bundle 'tomasr/molokai'
Bundle 'morhetz/gruvbox'
Bundle 'sjl/badwolf'

Bundle 'jnwhiteh/vim-golang'


let mapleader = ","
let g:mapleader = ","


" persistent undos - undo after you re-open the file
" " but this gives warnings under command line vim
" " use only in macvim
if has('gui_running')
	set undodir=~/.vim/backups
	set undofile
endif

"display the current mode
set showmode

filetype plugin on
filetype indent on
set autoread

let g:rails_menu=2
let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

"Python magic
autocmd FileType python set omnifunc=pythoncomplete#Complete

"static tags
set tags=./tags;$HOME


syntax on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set autoindent

command MkGuard         call MakeIncGuard()
function MakeIncGuard()
	let basename = substitute(bufname(""), '.*/', '', '')
	let guard = '__' . substitute(toupper(basename), '\.', '_', "g") . '__'
	call append(0, "#ifndef " . guard)
	call append(1, "#define " . guard)
	call append(line("$"), "#endif")
endfunction


command MkScriptAuthor        call MakeScriptAuthor()
function MakeScriptAuthor()
	call append(1, "#coding: utf-8")
	call append(2, "#author: lxfontes")
endfunction


"Go save swap files somewhere else
if has("win32") || has("win64")
  set directory=$TMP
else
  set directory=/tmp
end


"stop being annoying
set visualbell

set encoding=utf8

set ffs=unix,dos,mac "Default file type

"command completion
set wildmode=list:longest
set completeopt=longest,menuone


"my lil statusline (always on)
if has('statusline')
	set laststatus=2

	                                         " Broken down into easily includeable segments
	set statusline=%<%f\                     " Filename
	set statusline+=%w%h%m%r                 " Options
	set statusline+=%{fugitive#statusline()} " Git Hotness
	set statusline+=\ [%{&ff}/%Y]            " filetype
	set statusline+=\ [%{getcwd()}]          " current dir
	set statusline+=\ [A=\%03.3b/H=\%02.2B]  " ASCII / Hexadecimal value of char
	set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif


set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers

" ruby goodies
au BufRead,BufNewFile *.pill set ft=ruby
au BufRead,BufNewFile Gemfile set ft=ruby

" .h files
:autocmd BufNewFile *.h MkGuard

" JSON
au! BufRead,BufNewFile *.json setfiletype javascript

" html
au! BufRead,BufNewFile *.ejs setfiletype html

"waf scripts
autocmd BufNewFile,BufRead wscript set filetype=python

"remember file position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Highlight end of line whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Highlight tabs
syntax match Tab /\t/
hi Tab gui=underline guifg=blue ctermbg=blue

" bindings
map <leader>g :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
map <F3> :NERDTreeToggle<CR>

map <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

map <F5> :make<CR>


"remove extra white space from line end
noremap <leader>s :%s/\s\+$//g<CR>

" tab navigation like firefox
nnoremap <C-t> :tabnew<CR>
map <C-S-Right> :tabn<CR>
imap <C-S-Right> <ESC>:tabn<CR>
map <C-S-Left> :tabp<CR>
imap <C-S-Left> <ESC>:tabp<CR>

nnoremap // :TComment<CR>
vnoremap // :TComment<CR>





" GUI options
if has("gui_running")
  " No menus and no toolbar
  set guioptions-=m
  set guioptions-=T
endif


" Appearance
if has('cmdline_info')
	set ruler                  	" show the ruler
	set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " a ruler on steroids
	set showcmd                	" show partial commands in status line and
					" selected characters/lines in visual mode
endif

set title
set wrap
if exists("+colorcolumn")
  set colorcolumn=81
endif
set scrolloff=3
set scrolljump=5


" MacVim
if has("gui_macvim")
    set anti enc=utf-8 gfn=Anonymous\ Pro:h18,Anonymous\ Pro:h18
    set fuoptions=maxvert,maxhorz
endif

" Windows
if has("win32") || has("win64")
    " Use CUA keystrokes for clipboard: CTRL-X, CTRL-C, CTRL-V and CTRL-z
    source $VIMRUNTIME/mswin.vim
    set guifont=Consolas:h13:cANSI,Anonymous\ Pro:h13:cANSI
endif

"Specify the behavior when switching between buffers
 try
   set switchbuf=usetab
   set stal=2
 catch
 endtry



" configure nerdtree
let NERDTreeIgnore = ['\.pyc$','\~$','\.rbc$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1


" Highlight current line
set cursorline                " highlight current line
"hi cursorline guibg=#333333   " highlight bg color of current line
"hi CursorColumn guibg=#333333 " highlight cursor

set showmatch
set wildmenu


"supertab
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }


let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}



"enable 256 colors
set t_Co=256
colorscheme molokai
set bg=dark



Bundle 'gocode'
Bundle 'Blackrush/vim-gocode'

autocmd BufWritePre *.go :silent Fmt





"go tag

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
