set runtimepath+=~/.vim/vundle.git/
call vundle#rc()

" Plugins setup
" VIM
Bundle "fugitive.vim"
" taglists
Bundle "Tagbar"
Bundle "taglist.vim"
" doc @ github
Bundle "Markdown"
" file mgmt / terminal
Bundle "The-NERD-tree"
Bundle "Conque-Shell"
" code mgmt
Bundle "Align"
Bundle "tComment"
" html identation
Bundle "http://github.com/rstacruz/sparkup.git", {'rtp': 'vim/'}
" gists @ github
Bundle "http://github.com/mattn/gist-vim.git"
" language specific
Bundle "sandvine"
Bundle "python.vim"
" snippets
Bundle "snipMate"
Bundle "snipmate-snippets"

Bundle "rails"


" themes
" always keep 'desert' as fallback
Bundle "desert.vim"
Bundle "Railscasts-Theme-GUIand256color"

let mapleader = ","
let g:mapleader = ","

"enable 256 colors
set t_Co=256
set background=dark
colorscheme railscasts



filetype plugin on

"Python magic
autocmd FileType python set omnifunc=pythoncomplete#Complete

"static tags
set tags+=$HOME/.vim/tags/python.ctags


syntax on
filetype plugin indent on
set tabstop=8
set smarttab
set shiftwidth=8
set autoindent
set smartindent


command MkGuard         call MakeIncGuard()
function MakeIncGuard()
	let basename = substitute(bufname(""), '.*/', '', '')
	let guard = '__' . substitute(toupper(basename), '\.', '_', "g") . '__'
	call append(0, "#ifndef " . guard)
	call append(1, "#define " . guard)
	call append(line("$"), "#endif")
endfunction


command MkScriptAuthor        call MakeScriptAuthor()
function MakeScriptAuthor()
	call append(1, "#coding: utf-8")
	call append(2, "#author: lxfontes")
endfunction


"Go save swap files somewhere else
if has("win32") || has("win64")
  set directory=$TMP
else
  set directory=/tmp
end

"no compatible
set nocompatible

"stop being annoying
set visualbell

set encoding=utf8

set ffs=unix,dos,mac "Default file type

"command completion
set wildmode=list:longest
set completeopt=longest,menuone


"my lil statusline (always on)
set laststatus=2
set statusline=%<%F%h%m%r%h%w%y\ %{&ff}\ %=\ lin:%l\,%L\ col:%c%V\ pos:%o\ ascii:%b\ %P


set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

set hlsearch "Highlight search things

set incsearch "Make search act like search in modern browsers

" .h files
:autocmd BufNewFile *.h MkGuard

" JSON
au! BufRead,BufNewFile *.json setfiletype javascript

"sandvine policy
autocmd BufNewFile,BufRead policy*.conf set filetype=sandvine
autocmd BufNewFile,BufRead policy.conf set filetype=sandvine

"waf scripts
autocmd BufNewFile,BufRead wscript set filetype=python


"test
autocmd BufRead *.test                  setlocal filetype=cpp

"remember file position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"python specific settings
autocmd FileType python set expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Highlight end of line whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/



map <F1> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
nnoremap <silent> <F2> :NERDTreeToggle<CR>

"tag list width
let Tlist_WinWidth = 80
nnoremap <silent> <F3> :TlistToggle<CR>
map <F5> :make<CR>

"remove extra white space from line end
noremap <leader>s :%s/\s\+$//g<CR>
nnoremap <C-j> :tabprevious<CR>
nnoremap <C-k> :tabnext<CR>

nnoremap // :TComment<CR>
vnoremap // :TComment<CR>




function! s:Terminal()
    execute 'ConqueTermTab bash --login'
endfunction
command! Terminal call s:Terminal()



" GUI options
if has("gui_running")
  " No menus and no toolbar
  set guioptions-=m
  set guioptions-=T
endif


" Appearance
set ruler
set title
set wrap
if exists("+colorcolumn")
  set colorcolumn=81
endif
set scrolloff=3


" MacVim
if has("gui_macvim")
    set transp=1
    set anti enc=utf-8 gfn=Menlo:h14,Monaco:h14
    set fuoptions=maxvert,maxhorz
endif

" Windows
if has("win32") || has("win64")
    " Use CUA keystrokes for clipboard: CTRL-X, CTRL-C, CTRL-V and CTRL-z
    source $VIMRUNTIME/mswin.vim
    set guifont=Consolas:h13:cANSI,Anonymous\ Pro:h13:cANSI
endif

"Specify the behavior when switching between buffers
 try
   set switchbuf=usetab
   set stal=2
 catch
 endtry


" Highlight current line
set cursorline

" configure nerdtree
let NERDTreeIgnore = ['\.pyc$','\~$','\.rbc$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
