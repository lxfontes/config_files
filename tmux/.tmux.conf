# sierra madness
set -g default-shell $SHELL
set -g base-index 1

set-option -g default-terminal "screen-256color"
set-option -g history-limit 100000
set-option -g prefix C-a

set-window-option -g xterm-keys on
setw -g mode-keys vi

# Set window notifications
setw -g monitor-activity on
set -g visual-activity off

set-option -g repeat-time 200
# fixes weird esc behaviour in vim
set -s escape-time 0

# Mouse mode on
set -g mouse on

# focus events enabled for terminals that support them
set -g focus-events on

# moar colors
set -ga terminal-overrides 'xterm-256color:Tc'

# window titles
set-option -g set-titles on
set-option -g set-titles-string '[#S:#I] #W'
set-window-option -g automatic-rename on

# panes
set -g pane-border-style bg=default,fg=colour222
set -g pane-active-border-style bg=default,fg=colour43

# message text
set -g message-style bg=red,fg=colour3

# status line
set -g status-position "bottom"
set-window-option -g status-left " #S "
set -g status-left-style bg=colour16,fg=white

set-window-option -g status-right " %d-%b âˆ™ %H:%M"
set -g status-right-style bg=default,fg=green

set-window-option -g window-status-current-format " #W "

set -g window-status-current-style bg=colour8,fg=colour81

set-window-option -g window-status-format " #W "
set -g status-style bg=default,fg=white

#set-option -g pane-border-status top
#set-option -g pane-border-format " #P: #(basename #{pane_current_path})"

unbind-key C-a

# ctrl arrows
unbind-key -n C-Left
unbind-key -n C-Right

bind-key C-a send-prefix

# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."

bind-key : command-prompt
bind-key r refresh-client
bind-key L clear-history

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout

bind-key -r < resize-pane -L 10
bind-key -r > resize-pane -R 10
bind-key -r - resize-pane -U 10
bind-key -r + resize-pane -D 10

# use vim-like keys for splits and windows
bind-key S split-window -h
bind-key s split-window -v
bind-key x confirm-before kill-pane

bind C-l send-keys 'C-l'

bind-key C-o swap-pane -U

bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key n new-window

unbind [
unbind ]
bind-key Escape copy-mode
bind-key p paste-buffer
bind-key [ previous-window
bind-key ] next-window

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi 'v' send -X begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel
bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel\; run "tmux save -|pbcopy >/dev/null 2>&1"

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h"  "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j"  "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k"  "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l"  "select-pane -R"
bind-key -n M-\ if-shell "$is_vim" "send-keys M-\\" "select-pane -l"

bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9
